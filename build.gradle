plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.sonarqube' version '6.0.1.5171' // https://plugins.gradle.org/plugin/org.sonarqube
	id 'jacoco' // https://docs.gradle.org/current/userguide/jacoco_plugin.html
}

group = 'es.in2.issuer'
version = '0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
	toolVersion = '0.8.12'
}

sonar {
	properties {
		property "sonar.projectName", "IN2 SSI Hub Ccredential Issuer Backend"
		property "sonar.projectKey", "in2workspace_in2-ssihub-issuer-backend"
		property "sonar.organization", "in2workspace"
		property "sonar.host.url", "https://sonarcloud.io"
		// Where the Jacoco report is located to be consumed by SonarQube
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoRootReport.xml"
	}
}

bootJar {
	// Indicate which class is the executable class of the application
	mainClass = 'es.in2.issuer.Application'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	springBootVersion = '3.4.3'
}

dependencies {
	// Web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// Data
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	// Observability
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	// DevTool
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// Modules
	implementation project(':auth-server')
	implementation project(':credential-management')
	implementation project(':oid4vci')
	implementation project(':schema')
	implementation project(':signature')
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'

	group = project.group
	version = project.version

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}

	jacoco {
		toolVersion = '0.8.12'
	}

	repositories {
		mavenCentral()
	}

	dependencyManagement {
		imports {
			// use the same spring boot version as in the root
			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
		}
	}

	dependencies {
		// Spring Boot
		implementation 'org.springframework.boot:spring-boot-starter-web'
		// DevTools
		compileOnly 'org.projectlombok:lombok:1.18.36'
		annotationProcessor 'org.projectlombok:lombok:1.18.36'
		// Testing
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}

	tasks.named('test') {
		useJUnitPlatform()
		finalizedBy(tasks.jacocoTestReport)
	}

	if (!tasks.names.contains("jacocoTestReport")) {
		tasks.register('jacocoTestReport', JacocoReport) {
			dependsOn(tasks.test)

			reports {
				xml.required.set(true)
				html.required.set(true)
				csv.required.set(false)
			}

			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [])
			}))
		}
	}

}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.register('jacocoRootReport', JacocoReport) {
	dependsOn subprojects.tasks.test

	// Add the execution data from the subprojects
	executionData.from files(subprojects.findAll {
		it.layout.buildDirectory.file("jacoco/test.exec").get().asFile.exists()
	}.collect {
		it.layout.buildDirectory.file("jacoco/test.exec").get().asFile
	})

	// Add the execution data from the root project
	def rootExec = layout.buildDirectory.file("jacoco/test.exec").get().asFile
	if (rootExec.exists()) {
		executionData.from rootExec
	}

	// Add the source directories from the subprojects
	additionalSourceDirs.from files(
			subprojects.sourceSets.main.allSource.srcDirs,
			layout.projectDirectory.dir("src/main/java") // C贸digo del m贸dulo root
	)

	sourceDirectories.from files(
			subprojects.sourceSets.main.allSource.srcDirs,
			layout.projectDirectory.dir("src/main/java") // C贸digo del m贸dulo root
	)

	classDirectories.from files(
			subprojects.sourceSets.main.output,
			layout.buildDirectory.dir("classes/java/main") // Clases compiladas del root
	)

	reports {
		xml.required.set(true)
		// This is the report that will be uploaded to SonarQube
		xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/jacocoRootReport.xml"))
		html.required.set(true)
		html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/jacocoRootReport"))
		csv.required.set(false)
	}

	// Exclude classes from the report
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				"**/Application.class",
		])
	}))
}


tasks.register('printVersion') {
	doLast {
		println version
	}
}

tasks.register('printProjectName') {
	doLast {
		println rootProject.name
	}
}
